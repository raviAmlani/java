/* ----------------------------------------------------------------
 * Nombre de la Clase:  Temp2.java
 * Version: 1.0
 * Fecha:Oct 9, 2012
 * Empresa: 
 * Proyecto: OPM
 * Desarrollado por: Panel Sistemas Informaticos, S.L.
 * ----------------------------------------------------------------
 */
package com.code.others;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import org.apache.commons.codec.binary.Base64;

public class Temp3_Base64_CER {


	public static void main(String[] args) throws UnsupportedEncodingException{
		
		System.out.println("***********************************************************");
		String txtLocation = "C:\\Documents and Settings\\DelogicoUser\\Desktop\\NOMBRE_ABOGADO_ABOGADO.txt";
		System.out.println("File avail ? : "+new File(txtLocation).isFile());
		String cerTxt = readFile(txtLocation);
//		cerTxt = "Version: 3";
//		System.out.println(cerTxt);
		System.out.println("\n***********************************************************\n");
		
		String b64Location = "C:\\Documents and Settings\\DelogicoUser\\Desktop\\Backup_NOMBRE_ABOGADO_ABOGADO.cer";
		System.out.println("File avail ? : "+new File(b64Location).isFile());
		String cerb64_original = readFile(b64Location);
//		System.out.println(cerb64_original);
		System.out.println("\n***********************************************************\n");


		// DECODING 
		/*byte[] decoded_bytes_cer = Base64.decodeBase64(cerb64_original);
		String cert_direct = new String(decoded_bytes_cer);
		String cert_direct_utf8 = new String(decoded_bytes_cer, Charset.forName("UTF-8"));
		System.out.println("----> Decoded : \n"+cert_direct);
		System.out.println("----> Decoded : \n"+cert_direct_utf8);*/

		// ENCODING - byte[] as Direct input - WORKED...
		byte[] encoded_byte_cer = Base64.encodeBase64(cerTxt.getBytes());
		String cer_b64 = new String(encoded_byte_cer, Charset.forName("UTF8"));
		System.out.println("---> Encoded Output Byte : \n"+cer_b64);
		cer_b64 = Base64.encodeBase64URLSafeString(cerTxt.getBytes());
		System.out.println("----> Encoded Output Byte, Input Byte : "+ cerb64_original.equals(cer_b64) +" \n"+cer_b64);

		System.out.println("\n\n");
		byte[] tempByte = {48, -126, 7, 75, 48, -126, 6, 51, -96, 3, 2, 1, 2, 2, 16, 57, 101, 112, -21, -40, -97, 40, 32, 78, -62, -96, 107, -104, 72, 49, 13, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 48, -127, -27, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 69, 83, 49, 32, 48, 30, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 1, 22, 17, 97, 99, 64, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 49, 37, 48, 35, 6, 3, 85, 4, 7, 19, 28, 80, 97, 115, 101, 111, 32, 100, 101, 32, 82, 101, 99, 111, 108, 101, 116, 111, 115, 32, 49, 51, 32, 77, 97, 100, 114, 105, 100, 49, 43, 48, 41, 6, 3, 85, 4, 11, 19, 34, 67, 111, 110, 115, 117, 108, 116, 101, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 49, 54, 48, 52, 6, 3, 85, 4, 10, 19, 45, 67, 111, 110, 115, 101, 106, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 100, 101, 32, 108, 97, 32, 65, 98, 111, 103, 97, 99, 105, 97, 32, 78, 73, 70, 58, 81, 45, 50, 56, 54, 51, 48, 48, 54, 73, 49, 40, 48, 38, 6, 3, 85, 4, 3, 19, 31, 65, 67, 65, 32, 45, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 100, 111, 115, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 118, 111, 115, 48, 30, 23, 13, 49, 49, 49, 49, 49, 53, 49, 54, 53, 54, 50, 49, 90, 23, 13, 49, 52, 49, 49, 49, 53, 49, 54, 53, 54, 50, 49, 90, 48, -126, 1, 54, 49, 23, 48, 21, 6, 10, 43, 6, 1, 4, 1, -127, -127, 21, 30, 1, 19, 7, 65, 66, 79, 71, 65, 68, 79, 49, 16, 48, 14, 6, 3, 85, 4, 4, 19, 7, 65, 66, 79, 71, 65, 68, 79, 49, 15, 48, 13, 6, 3, 85, 4, 42, 19, 6, 80, 82, 85, 69, 66, 65, 49, 18, 48, 16, 6, 3, 85, 4, 5, 19, 9, 53, 54, 53, 54, 53, 54, 53, 55, 68, 49, 16, 48, 14, 6, 3, 85, 4, 12, 19, 7, 65, 98, 111, 103, 97, 100, 111, 49, 15, 48, 13, 6, 3, 85, 4, 8, 19, 6, 77, 97, 100, 114, 105, 100, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 69, 83, 49, 62, 48, 60, 6, 3, 85, 4, 10, 20, 53, 67, 111, 110, 115, 101, 106, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 100, 101, 32, 108, 97, 32, 65, 98, 111, 103, 97, 99, -19, 97, 32, 69, 115, 112, 97, -15, 111, 108, 97, 32, 47, 32, 67, 71, 65, 69, 32, 47, 32, 50, 48, 48, 48, 49, 23, 48, 21, 6, 3, 85, 4, 11, 19, 14, 50, 56, 48, 48, 52, 32, 47, 32, 52, 53, 52, 53, 52, 53, 49, 54, 48, 52, 6, 3, 85, 4, 3, 19, 45, 78, 79, 77, 66, 82, 69, 32, 65, 66, 79, 71, 65, 68, 79, 32, 65, 66, 79, 71, 65, 68, 79, 32, 80, 82, 85, 69, 66, 65, 32, 45, 32, 78, 73, 70, 32, 53, 54, 53, 54, 53, 54, 53, 55, 68, 49, 35, 48, 33, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 1, 22, 20, 97, 110, 97, 46, 118, 97, 122, 113, 117, 101, 122, 64, 112, 97, 110, 101, 108, 46, 101, 115, 48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -25, 97, 16, 116, 6, -40, 1, -68, -20, 28, -52, -110, 2, -67, 106, -85, -79, 33, -50, -57, 77, 115, 53, -6, -69, 27, 92, 126, -112, -28, 66, 12, -27, 12, 97, -47, -97, 22, -70, 43, 109, 95, 69, -67, -47, 124, 44, -49, -50, 118, 115, -12, 39, 34, -39, 112, 46, 40, 34, -113, -99, 49, 89, -77, 85, 104, -111, -97, 69, -50, 43, -89, -31, 77, 60, 12, 85, -95, 79, -79, -77, -124, 15, 118, -96, -4, -96, -47, 82, -115, 50, 6, -71, 44, -32, -14, -117, 124, 16, 54, 30, 107, 0, -43, -29, 105, 61, -53, -73, 90, 14, 79, 87, 86, -71, -40, 31, -113, 102, -83, -15, 13, -106, 13, 74, 106, 8, 127, 2, 3, 1, 0, 1, -93, -126, 3, 37, 48, -126, 3, 33, 48, 36, 6, 3, 85, 29, 18, 4, 29, 48, 27, -122, 25, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 48, 31, 6, 3, 85, 29, 17, 4, 24, 48, 22, -127, 20, 97, 110, 97, 46, 118, 97, 122, 113, 117, 101, 122, 64, 112, 97, 110, 101, 108, 46, 101, 115, 48, 12, 6, 3, 85, 29, 19, 1, 1, -1, 4, 2, 48, 0, 48, 14, 6, 3, 85, 29, 15, 1, 1, -1, 4, 4, 3, 2, 3, -8, 48, 29, 6, 3, 85, 29, 37, 4, 22, 48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 6, 8, 43, 6, 1, 5, 5, 7, 3, 4, 48, 17, 6, 9, 96, -122, 72, 1, -122, -8, 66, 1, 1, 4, 4, 3, 2, 5, -96, 48, 44, 6, 9, 96, -122, 72, 1, -122, -8, 66, 1, 8, 4, 31, 22, 29, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 100, 111, 99, 48, 100, 6, 9, 96, -122, 72, 1, -122, -8, 66, 1, 13, 4, 87, 22, 85, 69, 115, 116, 101, 32, 101, 115, 32, 117, 110, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 100, 111, 32, 112, 101, 114, 115, 111, 110, 97, 108, 32, 114, 101, 99, 111, 110, 111, 99, 105, 100, 111, 46, 32, 67, 111, 110, 115, 117, 108, 116, 101, 32, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 100, 111, 99, 13, 10, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, -14, -30, 32, -13, 34, -117, -1, 96, 88, 112, 118, -19, 16, 114, 113, 112, -28, -41, -16, -89, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, -128, 20, 100, -115, -81, 48, 37, 120, 112, 92, 112, 21, 52, 89, 62, 114, 82, -60, -22, 23, -28, 103, 48, -127, -84, 6, 3, 85, 29, 32, 4, -127, -92, 48, -127, -95, 48, -127, -98, 6, 11, 43, 6, 1, 4, 1, -127, -127, 21, 10, 2, 1, 48, -127, -114, 48, 41, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 29, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 100, 111, 99, 48, 97, 6, 8, 43, 6, 1, 5, 5, 7, 2, 2, 48, 85, 26, 83, 69, 115, 116, 101, 32, 101, 115, 32, 117, 110, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 100, 111, 32, 112, 101, 114, 115, 111, 110, 97, 108, 32, 114, 101, 99, 111, 110, 111, 99, 105, 100, 111, 46, 32, 67, 111, 110, 115, 117, 108, 116, 101, 32, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 100, 111, 99, 48, 86, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 74, 48, 72, 48, 70, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, -122, 58, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 99, 101, 114, 116, 105, 102, 105, 99, 97, 100, 111, 115, 47, 65, 67, 65, 99, 111, 114, 112, 111, 114, 97, 116, 105, 118, 111, 115, 46, 99, 114, 116, 48, 47, 6, 8, 43, 6, 1, 5, 5, 7, 1, 3, 4, 35, 48, 33, 48, 8, 6, 6, 4, 0, -114, 70, 1, 1, 48, 21, 6, 6, 4, 0, -114, 70, 1, 2, 48, 11, 19, 3, 69, 85, 82, 2, 1, 6, 2, 1, 4, 48, 124, 6, 3, 85, 29, 31, 4, 117, 48, 115, 48, 113, -96, 111, -96, 109, -122, 52, 104, 116, 116, 112, 58, 47, 47, 112, 105, 108, 111, 116, 111, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 99, 114, 108, 47, 65, 67, 65, 99, 111, 114, 112, 111, 114, 97, 116, 105, 118, 111, 115, 46, 99, 114, 108, -122, 53, 104, 116, 116, 112, 58, 47, 47, 112, 105, 108, 111, 116, 111, 46, 97, 99, 97, 98, 111, 103, 97, 99, 105, 97, 46, 111, 114, 103, 47, 99, 114, 108, 50, 47, 65, 67, 65, 99, 111, 114, 112, 111, 114, 97, 116, 105, 118, 111, 115, 46, 99, 114, 108, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 3, -126, 1, 1, 0, -102, 85, -93, -18, -3, 47, -13, -3, -69, -125, 56, -42, -83, 32, 89, -34, -49, -31, -125, 41, -126, -12, 96, -72, 66, -79, 17, 127, 115, 6, -59, 2, -64, -106, 59, -127, 108, -92, -78, -122, 63, 31, 2, 56, -93, -114, 91, 1, 29, 41, 47, 26, 93, -110, 94, 11, 3, 94, 13, -106, -92, -58, 72, -64, -96, -125, -76, -90, -66, -91, -30, 14, -24, 106, -85, -127, 94, 76, 13, -73, 98, 0, -116, 6, -36, -62, 29, 94, -76, 67, 53, -68, -74, -106, 12, 95, 39, -2, -54, -20, -105, 107, 89, -38, 52, -76, -120, 56, 27, 61, -29, -52, -114, 97, -68, 91, -106, 54, 117, 0, 12, -41, 84, -47, -12, -86, -27, -49, -10, -112, -42, 125, 40, -10, 101, 44, 65, -109, 69, 38, -60, -31, 54, 2, 66, 117, -122, -34, 5, -105, -17, 93, -111, 113, 25, -50, -65, -52, 109, -118, 90, -62, 125, 85, 86, -13, 23, 118, 2, -56, -92, -9, -99, -125, 71, -108, 121, -107, 15, -65, -120, -118, -51, -104, -17, 123, 39, 59, 19, -37, 127, 81, -9, 44, -8, -68, -34, -50, 101, 75, 3, 60, -73, 101, 67, 111, -114, -38, -10, -116, -117, -117, -64, 3, -79, 44, -83, 68, -64, -114, 38, -23, -80, 94, 108, 22, 111, -87, 83, 98, -41, -7, -91, 98, 30, -107, 107, -33, -68, -124, 121, -98, -77, 106, 87, 3, 105, -50, -70, -55, 51, -29, 99, 100, 122, 1};
		encoded_byte_cer = Base64.encodeBase64(tempByte);
		cer_b64 = new String(encoded_byte_cer, Charset.forName("UTF8"));
		System.out.println("---> Encoded Output Byte : \n"+cer_b64);
		String cer_b64_2 = new String(encoded_byte_cer);
		System.out.println("---> Encoded Output Byte : \n"+cer_b64_2);
		String cer_b64_3 = Base64.encodeBase64String(tempByte);
		System.out.println("---> Encoded Output Byte : \n"+cer_b64_3);
		
		System.out.println(cer_b64.equals(cer_b64_2));
		System.out.println(cer_b64.equals(cer_b64_3));
		System.out.println(cer_b64.equals(cerb64_original));
		
		
		// ENCODING - String using UTF-8 - not working.

		/*cer_b64 = Base64.encodeBase64String(cert_direct.getBytes());
		System.out.println("----> Encoded 1.1 : \n"+cer_b64);
		cer_b64 = Base64.encodeBase64String(cert_direct.getBytes(Charset.forName("UTF-8")));
		System.out.println("----> Encoded 1.2 : \n"+cer_b64);
		cer_b64 = Base64.encodeBase64String(cert_direct_utf8.getBytes());
		System.out.println("----> Encoded 2.1 : \n"+cer_b64);
		cer_b64 = Base64.encodeBase64String(cert_direct_utf8.getBytes(Charset.forName("UTF-8")));
		System.out.println("----> Encoded 2.2 : \n"+cer_b64);*/


		System.out.println("\n**************************************************************\n");


        
		
	}  // main() method...
	
	
	public static String readFile(String location){
		
		String cer = null;
		File f = new File(location);
		BufferedReader br = null;
		FileInputStream fis = null;
		InputStreamReader isr = null;
		StringBuffer buffer = new StringBuffer();
		try {

			// 1. CER TO STRING
			fis = new FileInputStream(f);
			isr = new InputStreamReader(fis, Charset.forName("UTF8"));  // ISO-8859-1
			br = new BufferedReader(isr);

			String line = null;
			while((line = br.readLine()) != null) {
				buffer.append(line);
			}

			br.close();
			isr.close();

			cer = buffer.toString();	

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return cer;
		
	}
	
	public static byte[] bytesDesdeInputStream(java.io.InputStream in, int length)
	{
		java.io.DataInputStream din = new java.io.DataInputStream(in);
		byte[] bytecodes = new byte[length];
		try {
			din.readFully(bytecodes);
			if (din != null) din.close();
		}catch (IOException ex){
			ex.getMessage();
			ex.printStackTrace();
		}
		return bytecodes;

	}
	
}

